.TH "ExampleGenerator.h" 3 "28 Jul 2003" "VFML" \" -*- nroff -*-
.ad l
.nh
.SH NAME
ExampleGenerator.h \- 
.SH "Detailed Description"
.PP 
Generate a random (but reproducible) data set. 

Randomly, but reproducably, create a series of examples. These examples could then be classified with some known model and used as a synthetic dataset to test a learner. This uses the \fBRandomSetState()\fP functions so that it will produce the same series of examples for the same seed no matter what the rest of your program does with the random number generators.
.PP
.SH SYNOPSIS
.br
.PP
.SS "Data Structures"

.in +1c
.ti -1c
.RI "struct \fB_ExampleGenerator_\fP"
.br
.RI "\fIHolds the information needed to reproducibly make a random data set. See \fBExampleGenerator.h\fP for more detail. \fP"
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef \fB_ExampleGenerator_\fP \fBExampleGenerator\fP"
.br
.RI "\fIHolds the information needed to reproducibly make a random data set. See \fBExampleGenerator.h\fP for more detail. \fP"
.ti -1c
.RI "typedef \fB_ExampleGenerator_\fP * \fBExampleGeneratorPtr\fP"
.br
.RI "\fIHolds the information needed to reproducibly make a random data set. See \fBExampleGenerator.h\fP for more detail. \fP"
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "\fBExampleGeneratorPtr\fP \fBExampleGeneratorNew\fP (\fBExampleSpecPtr\fP es, int seed)"
.br
.RI "\fICreates a new example generator. \fP"
.ti -1c
.RI "void \fBExampleGeneratorFree\fP (\fBExampleGeneratorPtr\fP eg)"
.br
.RI "\fIFrees the memory associated with the example generator. \fP"
.ti -1c
.RI "\fBExamplePtr\fP \fBExampleGeneratorGenerate\fP (\fBExampleGeneratorPtr\fP eg)"
.br
.RI "\fIMakes a random example. \fP"
.in -1c
.SH "Typedef Documentation"
.PP 
.SS "typedef struct \fB_ExampleGenerator_\fP  \fBExampleGenerator\fP"
.PP
Holds the information needed to reproducibly make a random data set. See \fBExampleGenerator.h\fP for more detail. 
.SS "typedef struct \fB_ExampleGenerator_\fP * \fBExampleGeneratorPtr\fP"
.PP
Holds the information needed to reproducibly make a random data set. See \fBExampleGenerator.h\fP for more detail. 
.SH "Function Documentation"
.PP 
.SS "void ExampleGeneratorFree (\fBExampleGeneratorPtr\fP eg)"
.PP
Frees the memory associated with the example generator. 
.SS "\fBExamplePtr\fP ExampleGeneratorGenerate (\fBExampleGeneratorPtr\fP eg)"
.PP
Makes a random example. Allocates an example, randomly sets the values of its attributes, and returns it. Uses uniform distributions for all of its decisions. For continuous attributes it uniformly generates a value between 0 and 1.0; you might like to scale this value to fit your needs.
.PP
You are must free the ExamplePtr when you are finished with it by calling ExampleFree. 
.SS "\fBExampleGeneratorPtr\fP ExampleGeneratorNew (\fBExampleSpecPtr\fP es, int seed)"
.PP
Creates a new example generator. The generator will generate examples conforming to es using a seeded random number generator. If the value of seed is -1 this will select a random initial seed (But you'll need to initialize the random number generator on your system for this to work; The function \fBRandomInit()\fP will do the job). 
.SH "Author"
.PP 
Generated automatically by Doxygen for VFML from the source code.
